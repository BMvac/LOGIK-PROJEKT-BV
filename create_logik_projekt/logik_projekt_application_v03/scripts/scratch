from PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QLineEdit, QComboBox, QLabel
from PySide6.QtCore import Qt

from ...widgets.button.button import CustomButton
from ...widgets.combo_box.combo_box_resolution import create_combo_box_resolution_qt6
from ...widgets.combo_box.combo_box_bit_depth import create_combo_box_bit_depth_qt6
from ...widgets.combo_box.combo_box_frame_rate import create_combo_box_frame_rate_qt6
from ...widgets.combo_box.combo_box_scan_mode import create_combo_box_scan_mode_qt6
from ...widgets.combo_box.combo_box_color_science import create_combo_box_color_science_qt6
from ...widgets.combo_box.combo_box_start_frame import create_combo_box_start_frame_qt6
from ...widgets.line_edit.line_edit_projekt_namer import (
    create_serial_number_qt6,
    create_client_name_qt6,
    create_campaign_name_qt6,
    create_projekt_nickname_qt6,
)
from ...functions.label.label import create_label_qt6
from ...functions.string_utilities.string_utilities import string_clean
from ...widgets.style_sheet.logik_stylesheet import stylesheet
from ...widgets.summary_textbox.summary_textbox import create_summary_textbox_qt6
from ...functions.saver.template_saver import projekt_template_saver_qt6
from ...functions.list_software.list_flame_family_software import flame_family_app_list, sanitize_app_name
from ...functions.list_volumes.list_flame_framestores import list_framestores

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Logik Projekt Application")
        self.setGeometry(100, 100, 1440, 960)  # Set the window size
        
        self.initUI()
        self.apply_styles()
        self.center()

    def initUI(self):
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)
        central_widget.setGeometry(0, 0, 1440, 960)  # Set central widget size
        central_widget.setStyleSheet(stylesheet)

        # Create the summary text box
        self.summary_text_box = create_summary_textbox_qt6()
        self.summary_text_box.setGeometry(160, 528, 384, 216)
        self.summary_text_box.setParent(central_widget)

        # Dictionary to store references to line edits and combo boxes
        self.lineedits = {}
        self.combo_boxes = {}

        # Function to create and position labeled widgets
        def add_labeled_widget(parent, label_text, widget, x, y, width, height):
            label = create_label_qt6(label_text)
            label.setParent(parent)
            label.setGeometry(x, y, 128, 28)
            
            widget.setParent(parent)
            widget.setGeometry(x + 144, y, width, height)  # Adjust x-coordinate to the right of the label

            # Store references to the widgets for summary updating
            if isinstance(widget, QLineEdit):
                self.lineedits[label_text] = widget
                widget.textChanged.connect(self.update_summary_text_box)
            elif isinstance(widget, QComboBox):
                self.combo_boxes[label_text] = widget
                widget.currentIndexChanged.connect(self.update_summary_text_box)

        # Create and position widgets with labels
        add_labeled_widget(central_widget, "Serial Number:", create_serial_number_qt6(), 16, 48, 384, 28)
        add_labeled_widget(central_widget, "Client Name:", create_client_name_qt6(), 16, 96, 384, 28)
        add_labeled_widget(central_widget, "Campaign Name:", create_campaign_name_qt6(), 16, 144, 384, 28)
        projekt_nickname_edit = create_projekt_nickname_qt6()
        projekt_nickname_edit.setReadOnly(True)  # Set to read-only
        add_labeled_widget(central_widget, "Projekt Nickname:", projekt_nickname_edit, 16, 192, 384, 28)
        add_labeled_widget(central_widget, "Resolution:", create_combo_box_resolution_qt6(), 16, 240, 384, 28)
        add_labeled_widget(central_widget, "Bit Depth:", create_combo_box_bit_depth_qt6(), 16, 288, 384, 28)
        add_labeled_widget(central_widget, "Frame Rate:", create_combo_box_frame_rate_qt6(), 16, 336, 384, 28)
        add_labeled_widget(central_widget, "Scan Mode:", create_combo_box_scan_mode_qt6(), 16, 384, 384, 28)
        add_labeled_widget(central_widget, "Color Science:", create_combo_box_color_science_qt6(), 16, 432, 384, 28)
        add_labeled_widget(central_widget, "Start Frame:", create_combo_box_start_frame_qt6(), 16, 480, 384, 28)
        
        # Create and position the Flame Family software combo box
        flame_family_apps = flame_family_app_list("/home/pman/dummy_software_folders")  # Adjust the directory path
        flame_family_combo_box = QComboBox()
        flame_family_combo_box.addItems(flame_family_apps)
        add_labeled_widget(central_widget, "Flame Family Apps:", flame_family_combo_box, 16, 528, 384, 28)
        flame_family_combo_box.currentIndexChanged.connect(self.on_flame_family_app_selected)

        # Create and position the framestore combo box
        framestore_combo_box = QComboBox()
        framestore_combo_box.setGeometry(16, 576, 384, 28)
        framestore_combo_box.setParent(central_widget)
        
        # Populate the framestore combo box
        framestores = list_framestores()
        if framestores:
            framestore_combo_box.addItems(framestores)
        
        framestore_combo_box.currentIndexChanged.connect(self.on_framestore_selected)
        add_labeled_widget(central_widget, "Framestore:", framestore_combo_box, 16, 576, 384, 28)

        # Create and position the chosen software label and widget
        chosen_software_label = create_label_qt6("Chosen Software:")
        chosen_software_label.setParent(central_widget)
        chosen_software_label.setGeometry(16, 624, 128, 28)
        
        self.chosen_software_widget = QLabel("")
        self.chosen_software_widget.setParent(central_widget)
        self.chosen_software_widget.setGeometry(160, 624, 384, 28)
        
        # Create and position the chosen framestore label and widget
        chosen_framestore_label = create_label_qt6("Chosen Framestore:")
        chosen_framestore_label.setParent(central_widget)
        chosen_framestore_label.setGeometry(16, 672, 128, 28)
        
        self.chosen_framestore_widget = QLabel("")
        self.chosen_framestore_widget.setParent(central_widget)
        self.chosen_framestore_widget.setGeometry(160, 672, 384, 28)

        # Create and position the save button
        save_button = CustomButton("Save Template")
        save_button.setParent(central_widget)
        save_button.setGeometry(16, 816, 384, 28)
        save_button.clicked.connect(self.save_template)  # Connect the save button to the save_template function

        # Initialize chosen_framestore and chosen_software
        self.chosen_framestore = None
        self.chosen_software = None

        # Update the summary box initially
        self.update_summary_text_box()

    def on_flame_family_app_selected(self, index):
        chosen_item = self.combo_boxes["Flame Family Apps:"].currentText()
        self.chosen_software = sanitize_app_name(chosen_item)
        self.chosen_software_widget.setText(self.chosen_software)
        
    def on_framestore_selected(self, index):
        self.chosen_framestore = self.combo_boxes["Framestore:"].currentText()
        self.chosen_framestore_widget.setText(self.chosen_framestore)

    def update_summary_text_box(self):
        summary_lines = []
        projekt_serial = string_clean(self.lineedits["Serial Number:"].text().strip())
        projekt_client = string_clean(self.lineedits["Client Name:"].text().strip())
        projekt_campaign = string_clean(self.lineedits["Campaign Name:"].text().strip())

        # Construct projekt_nickname based on conditions
        if not projekt_client or not projekt_campaign:
            projekt_nickname = ""
        elif projekt_serial:
            projekt_nickname = f"{projekt_serial}_{projekt_client}_{projekt_campaign}"
        else:
            projekt_nickname = f"{projekt_client}_{projekt_campaign}"

        self.lineedits["Projekt Nickname:"].setText(projekt_nickname)

        for label, lineedit in self.lineedits.items():
            summary_lines.append(f"{label} {string_clean(lineedit.text())}")

        for label, combo_box in self.combo_boxes.items():
            if label == "Resolution:":
                value_data = combo_box.itemData(combo_box.currentIndex())
                if value_data:
                    summary_lines.append(f"{label} {value_data['width']} x {value_data['height']}")
            elif label == "Framestore:" and self.chosen_framestore:
                summary_lines.append(f"{label} {self.chosen_framestore}")
            elif label == "Flame Family Apps:" and self.chosen_software:
                summary_lines.append(f"{label} {self.chosen_software}")
            else:
                summary_lines.append(f"{label} {combo_box.currentText()}")

        summary_text = '\n'.join(summary_lines)
        self.summary_text_box.setPlainText(summary_text)

    def save_template(self):
        summary_text = self.summary_text_box.toPlainText()
        projekt_nickname = self.lineedits["Projekt Nickname:"].text()
        projekt_template_saver_qt6(self, summary_text, projekt_nickname)

    def apply_styles(self):
        try:
            self.setStyleSheet(stylesheet)  # Apply the stylesheet
        except Exception as e:
            QMessageBox.critical(self, "Error", str(e))

    def center(self):
        screen = QApplication.primaryScreen()
        screen_geometry = screen.availableGeometry()
        window_geometry = self.frameGeometry()
        window_geometry.moveCenter(screen_geometry.center())
        self.move(window_geometry.topLeft())

if __name__ == '__main__':
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec()
